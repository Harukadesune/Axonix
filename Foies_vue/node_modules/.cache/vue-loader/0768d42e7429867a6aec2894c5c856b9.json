{"remainingRequest":"/Users/haruka/IdeaProjects/Axonix/Foies_vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/haruka/IdeaProjects/Axonix/Foies_vue/src/views/Userinfo/index.vue?vue&type=style&index=0&id=6bcdd4f6&scoped=true&lang=css","dependencies":[{"path":"/Users/haruka/IdeaProjects/Axonix/Foies_vue/src/views/Userinfo/index.vue","mtime":1745308249743},{"path":"/Users/haruka/IdeaProjects/Axonix/Foies_vue/node_modules/css-loader/dist/cjs.js","mtime":1745391002266},{"path":"/Users/haruka/IdeaProjects/Axonix/Foies_vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1745391002124},{"path":"/Users/haruka/IdeaProjects/Axonix/Foies_vue/node_modules/postcss-loader/src/index.js","mtime":1745391002227},{"path":"/Users/haruka/IdeaProjects/Axonix/Foies_vue/node_modules/cache-loader/dist/cjs.js","mtime":1745391003736},{"path":"/Users/haruka/IdeaProjects/Axonix/Foies_vue/node_modules/vue-loader/lib/index.js","mtime":1745391002124}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5hcHAtY29udGFpbmVyIHsKICBwYWRkaW5nOiAyMHB4Owp9CgouZWwtdGFibGUgewogIG1hcmdpbi10b3A6IDEwcHg7Cn0KCi5lbC1idXR0b24gewogIG1hcmdpbi1yaWdodDogNXB4Owp9Cgouc2VhcmNoLWZvcm0gewogIG1hcmdpbi1ib3R0b206IDBweDsKfQoKLmFkZC11c2VyLWNvbnRhaW5lciB7CiAgbWF4LXdpZHRoOiA2MDBweDsKICBtYXJnaW46IDAgYXV0bzsKICBwYWRkaW5nOiAyMHB4OwogIGJhY2tncm91bmQ6ICNmZmY7CiAgYm9yZGVyLXJhZGl1czogOHB4OwogIGJveC1zaGFkb3c6IDAgMnB4IDEwcHggcmdiYSgwLCAwLCAwLCAwLjEpOwp9CgoucmVjb3JkLWNvdW50IHsKICBtYXJnaW4tdG9wOiAyMHB4OwogIGZvbnQtc2l6ZTogMTRweDsKICBjb2xvcjogIzYwNjI2NjsKfQoKLmFjdGlvbi1yb3cgewogIG1hcmdpbi1ib3R0b206IDIwcHg7Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AAmVA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/Userinfo","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <!-- 搜索表单 -->\n    <el-form :inline=\"true\" :model=\"searchForm\" class=\"search-form\">\n      <el-form-item label=\"用户名\">\n        <el-input v-model=\"searchForm.username\" placeholder=\"请输入用户名\" clearable />\n      </el-form-item>\n      <el-form-item label=\"电话\">\n        <el-input v-model=\"searchForm.phone\" placeholder=\"请输入电话\" clearable />\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"fetchUsers\">查询</el-button>\n        <el-button @click=\"resetSearch\">重置</el-button>\n      </el-form-item>\n    </el-form>\n\n    <!-- 操作按钮和记录数显示 -->\n    <el-row class=\"action-row\" type=\"flex\" justify=\"space-between\" align=\"middle\">\n      <el-col :span=\"8\">\n        <el-button type=\"primary\" @click=\"handleAdd\">添加用户</el-button>\n        <el-button type=\"danger\" @click=\"confirmBatchDelete\" :disabled=\"selectedUsers.length === 0\">批量删除</el-button>\n      </el-col>\n      <el-col :span=\"8\" class=\"record-count\" style=\"text-align: right;\">\n        <span>当前共有 {{ totalRecords }} 条记录</span>\n      </el-col>\n    </el-row>\n\n    <!-- 用户表格 -->\n    <el-table :data=\"users\" border @selection-change=\"handleSelectionChange\" :empty-text=\"'没有数据'\">\n      <el-table-column type=\"selection\" width=\"55\" />\n      <el-table-column prop=\"id\" label=\"ID\" width=\"80\" />\n      <el-table-column prop=\"username\" label=\"用户名\" width=\"120\" />\n      <el-table-column prop=\"avatar\" label=\"头像\" width=\"80\">\n        <template slot-scope=\"scope\">\n          <el-avatar :src=\"scope.row.avatar\" size=\"small\" />\n        </template>\n      </el-table-column>\n      <el-table-column prop=\"gender\" label=\"性别\" width=\"80\">\n        <template slot-scope=\"scope\">{{ formatGender(scope.row.gender) }}</template>\n      </el-table-column>\n      <el-table-column prop=\"age\" label=\"年龄\" width=\"80\" />\n      <el-table-column prop=\"province\" label=\"省份\" width=\"100\" />\n      <el-table-column prop=\"city\" label=\"城市\" width=\"100\" />\n      <el-table-column prop=\"county\" label=\"县\" width=\"100\" />\n      <el-table-column prop=\"address\" label=\"详细地址\" width=\"180\" show-overflow-tooltip />\n      <el-table-column prop=\"email\" label=\"邮箱\" width=\"180\" show-overflow-tooltip />\n      <el-table-column prop=\"phone\" label=\"电话\" width=\"140\" />\n      <el-table-column prop=\"disabilityType\" label=\"残疾类型\" width=\"120\">\n        <template slot-scope=\"scope\">{{ formatDisability(scope.row.disabilityType) }}</template>\n      </el-table-column>\n      <el-table-column prop=\"isVip\" label=\"VIP\" width=\"80\">\n        <template slot-scope=\"scope\">{{ scope.row.isVip ? \"是\" : \"否\" }}</template>\n      </el-table-column>\n      <el-table-column prop=\"lastLoginTime\" label=\"最后登录时间\" width=\"180\">\n        <template slot-scope=\"scope\">{{ formatDate(scope.row.lastLoginTime) }}</template>\n      </el-table-column>\n      <el-table-column prop=\"createdAt\" label=\"创建时间\" width=\"180\">\n        <template slot-scope=\"scope\">{{ formatDate(scope.row.createdAt) }}</template>\n      </el-table-column>\n      <el-table-column prop=\"updatedAt\" label=\"更新时间\" width=\"180\">\n        <template slot-scope=\"scope\">{{ formatDate(scope.row.updatedAt) }}</template>\n      </el-table-column>\n      <el-table-column label=\"操作\" width=\"160\" fixed=\"right\">\n        <template slot-scope=\"scope\">\n          <el-button size=\"mini\" @click=\"handleEdit(scope.row)\">编辑</el-button>\n          <el-button size=\"mini\" type=\"danger\" @click=\"handleDelete(scope.row.id)\">删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- 添加/编辑用户弹出框 -->\n    <el-dialog :visible.sync=\"dialogVisible\" title=\"用户信息\" width=\"600px\">\n      <el-form ref=\"userForm\" :model=\"user\" :rules=\"rules\" label-width=\"100px\">\n        <el-form-item label=\"用户名\" prop=\"username\">\n          <el-input v-model=\"user.username\" />\n        </el-form-item>\n\n        <el-form-item label=\"密码\" prop=\"password\">\n          <el-input v-model=\"user.password\" type=\"password\" />\n        </el-form-item>\n\n        <el-form-item label=\"邮箱\" prop=\"email\">\n          <el-input v-model=\"user.email\" />\n        </el-form-item>\n\n        <el-form-item label=\"电话\" prop=\"phone\">\n          <el-input v-model=\"user.phone\" />\n        </el-form-item>\n\n        <el-form-item label=\"性别\" prop=\"gender\">\n          <el-select v-model=\"user.gender\">\n            <el-option label=\"男\" :value=\"1\" />\n            <el-option label=\"女\" :value=\"2\" />\n            <el-option label=\"未知\" :value=\"0\" />\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"年龄\" prop=\"age\">\n          <el-input-number v-model=\"user.age\" :min=\"0\" :max=\"120\" />\n        </el-form-item>\n\n        <el-form-item label=\"省份\" prop=\"province\">\n          <el-input v-model=\"user.province\" />\n        </el-form-item>\n\n        <el-form-item label=\"城市\" prop=\"city\">\n          <el-input v-model=\"user.city\" />\n        </el-form-item>\n\n        <el-form-item label=\"县\" prop=\"county\">\n          <el-input v-model=\"user.county\" />\n        </el-form-item>\n\n        <el-form-item label=\"详细地址\" prop=\"address\">\n          <el-input v-model=\"user.address\" />\n        </el-form-item>\n\n        <el-form-item label=\"残疾类型\" prop=\"disabilityType\">\n          <el-select v-model=\"user.disabilityType\">\n            <el-option label=\"无\" :value=\"0\" />\n            <el-option label=\"视障\" :value=\"1\" />\n            <el-option label=\"听障\" :value=\"2\" />\n            <el-option label=\"其他障碍\" :value=\"3\" />\n          </el-select>\n        </el-form-item>\n\n        <el-form-item label=\"是否 VIP\" prop=\"isVip\">\n          <el-switch v-model=\"user.isVip\" :active-value=\"1\" :inactive-value=\"0\" />\n        </el-form-item>\n\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"submitForm\">保存</el-button>\n          <el-button @click=\"closeDialog\">取消</el-button>\n        </el-form-item>\n      </el-form>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport UserAPI from '@/api/user_api';\n\nexport default {\n  data() {\n    return {\n      users: [],\n      selectedUsers: [],\n      totalRecords: 0,\n      searchForm: {\n        username: '',\n        phone: ''\n      },\n      dialogVisible: false,\n      user: {\n        id: null,\n        username: '',\n        password: '',\n        email: '',\n        phone: '',\n        gender: 0,\n        age: 0,\n        province: '',\n        city: '',\n        county: '',\n        address: '',\n        disabilityType: 0,\n        isVip: 0,\n        createdAt: '',\n        updatedAt: '',\n      },\n      rules: {\n        username: [{ required: true, message: '请输入用户名', trigger: 'blur' }],\n        password: [{ required: true, message: '请输入密码', trigger: 'blur' }],\n        email: [{ required: true, type: 'email', message: '请输入有效邮箱', trigger: 'blur' }],\n        phone: [{ required: true, message: '请输入电话', trigger: 'blur' }]\n      }\n    };\n  },\n\n  created() {\n    this.fetchUsers();\n  },\n  methods: {\n    async fetchUsers() {\n      const example = {\n        oredCriteria: [{ criteria: [] }]\n      };\n\n      if (this.searchForm.username) {\n        example.oredCriteria[0].criteria.push({\n          condition: \"username LIKE\",\n          value: `%${this.searchForm.username}%`,\n          singleValue: true\n        });\n      }\n\n      if (this.searchForm.phone) {\n        example.oredCriteria[0].criteria.push({\n          condition: \"phone LIKE\",\n          value: `%${this.searchForm.phone}%`,\n          singleValue: true\n        });\n      }\n\n      try {\n        const response = await UserAPI.getUsers(example);\n        this.users = response.data;\n\n        const countResponse = await UserAPI.countUsers(example);\n        this.totalRecords = countResponse.data;\n      } catch (error) {\n        console.error('获取用户列表失败', error);\n      }\n    },\n\n\n    resetSearch() {\n      this.searchForm = { username: '', phone: '' };\n      this.fetchUsers();\n    },\n\n    handleSelectionChange(selection) {\n      this.selectedUsers = selection.map(user => user.id);\n    },\n\n    handleAdd() {\n      const now = new Date().toISOString();\n      this.user = {\n        id: null,\n        username: '',\n        password: '',\n        email: '',\n        phone: '',\n        gender: 0,\n        age: 0,\n        province: '',\n        city: '',\n        county: '',\n        address: '',\n        disabilityType: 0,\n        isVip: 0,\n        createdAt: now,\n        updatedAt: ''\n      };\n      this.dialogVisible = true;\n    },\n\n\n    handleEdit(user) {\n      this.user = { ...user };\n      this.dialogVisible = true;\n    },\n\n    async submitForm() {\n      this.$refs.userForm.validate(async (valid) => {\n        if (valid) {\n          const now = new Date().toISOString();\n          this.user.updatedAt = now;\n\n          try {\n            if (this.user.id) {\n              await UserAPI.updateUser(this.user);\n            } else {\n              await UserAPI.addUser(this.user);\n            }\n            this.$message.success('用户信息保存成功');\n            this.dialogVisible = false;\n            this.fetchUsers();\n          } catch (error) {\n            this.$message.error('保存用户信息失败');\n            console.error(error);\n          }\n        }\n      });\n    },\n\n    closeDialog() {\n      this.dialogVisible = false;\n    },\n\n    async handleBatchDelete() {\n      try {\n        await Promise.all(this.selectedUsers.map(id => UserAPI.deleteUser(id)));\n        this.fetchUsers();\n        this.selectedUsers = [];\n        this.$message.success('批量删除成功');\n      } catch (error) {\n        console.error('批量删除失败', error);\n      }\n    },\n\n    async handleDelete(userId) {\n      this.$confirm('确定要删除该用户吗？', '警告', {\n        type: 'warning',\n        cancelButtonText: '取消',\n        confirmButtonText: '确定'\n      })\n        .then(async () => {\n          try {\n            await UserAPI.deleteUser(userId);\n            this.$message.success('删除成功');\n            this.fetchUsers();\n          } catch (error) {\n            console.error('删除失败', error);\n            this.$message.error('删除失败，请先删除该用户的其它记录！');\n          }\n        })\n        .catch(() => {\n        });\n    },\n\n    confirmBatchDelete() {\n      if (this.selectedUsers.length === 0) return;\n      this.$confirm('确定要删除选中的用户吗？', '警告', {\n        type: 'warning',\n        cancelButtonText: '取消',\n        confirmButtonText: '确定'\n      })\n        .then(() => this.handleBatchDelete())\n        .catch(() => { });\n    },\n\n    formatGender(gender) {\n      return gender === 1 ? \"男\" : gender === 2 ? \"女\" : \"未知\";\n    },\n\n    formatDisability(type) {\n      const types = { 0: \"无\", 1: \"视障\", 2: \"听障\", 3: \"其他障碍\" };\n      return types[type] || \"未知\";\n    },\n\n    formatDate(date) {\n      return date ? new Date(date).toLocaleString() : \"无\";\n    }\n  }\n};\n</script>\n\n<style scoped>\n.app-container {\n  padding: 20px;\n}\n\n.el-table {\n  margin-top: 10px;\n}\n\n.el-button {\n  margin-right: 5px;\n}\n\n.search-form {\n  margin-bottom: 0px;\n}\n\n.add-user-container {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n  background: #fff;\n  border-radius: 8px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n}\n\n.record-count {\n  margin-top: 20px;\n  font-size: 14px;\n  color: #606266;\n}\n\n.action-row {\n  margin-bottom: 20px;\n}\n</style>"]}]}