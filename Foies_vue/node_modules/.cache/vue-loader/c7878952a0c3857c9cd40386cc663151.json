{"remainingRequest":"/Users/haruka/IdeaProjects/Axonix/Foies_vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/haruka/IdeaProjects/Axonix/Foies_vue/src/views/Notifications/index.vue?vue&type=style&index=0&id=bc643dbe&scoped=true&lang=css","dependencies":[{"path":"/Users/haruka/IdeaProjects/Axonix/Foies_vue/src/views/Notifications/index.vue","mtime":1745308249742},{"path":"/Users/haruka/IdeaProjects/Axonix/Foies_vue/node_modules/css-loader/dist/cjs.js","mtime":1745391002266},{"path":"/Users/haruka/IdeaProjects/Axonix/Foies_vue/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1745391002124},{"path":"/Users/haruka/IdeaProjects/Axonix/Foies_vue/node_modules/postcss-loader/src/index.js","mtime":1745391002227},{"path":"/Users/haruka/IdeaProjects/Axonix/Foies_vue/node_modules/cache-loader/dist/cjs.js","mtime":1745391003736},{"path":"/Users/haruka/IdeaProjects/Axonix/Foies_vue/node_modules/vue-loader/lib/index.js","mtime":1745391002124}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5hcHAtY29udGFpbmVyIHsKICBwYWRkaW5nOiAyMHB4Owp9CgouZWwtdGFibGUgewogIG1hcmdpbi10b3A6IDIwcHg7Cn0KCi5lbC1idXR0b24gewogIG1hcmdpbi1yaWdodDogNXB4Owp9Cgouc2VhcmNoLWZvcm0gewogIG1hcmdpbi1ib3R0b206IDBweDsKfQoKLnJlY29yZC1jb3VudCB7CiAgbWFyZ2luLXRvcDogMjBweDsKICBmb250LXNpemU6IDE0cHg7CiAgY29sb3I6ICM2MDYyNjY7Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";AAqRA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/Notifications","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <!-- 搜索表单 -->\n    <el-form :inline=\"true\" :model=\"searchForm\" class=\"search-form\">\n      <el-form-item label=\"标题\">\n        <el-input v-model=\"searchForm.title\" placeholder=\"请输入通知标题\" clearable />\n      </el-form-item>\n      <el-form-item label=\"内容\">\n        <el-input v-model=\"searchForm.content\" placeholder=\"请输入通知内容\" clearable />\n      </el-form-item>\n      <el-form-item>\n        <el-button type=\"primary\" @click=\"fetchNotifications\">查询</el-button>\n        <el-button @click=\"resetSearch\">重置</el-button>\n      </el-form-item>\n    </el-form>\n\n    <!-- 操作按钮和记录数显示 -->\n    <el-row class=\"action-row\" type=\"flex\" justify=\"space-between\" align=\"middle\">\n      <el-col :span=\"8\">\n        <el-button type=\"primary\" @click=\"handleAdd\">添加通知</el-button>\n        <el-button type=\"danger\" @click=\"confirmBatchDelete\"\n          :disabled=\"selectedNotifications.length === 0\">批量删除</el-button>\n      </el-col>\n      <el-col :span=\"8\" class=\"record-count\" style=\"text-align: right;\">\n        <span>当前共有 {{ totalRecords }} 条记录</span>\n      </el-col>\n    </el-row>\n\n    <!-- 通知表格 -->\n    <el-table :data=\"notifications\" border @selection-change=\"handleSelectionChange\" :empty-text=\"'没有数据'\">\n      <el-table-column type=\"selection\" width=\"50\" />\n      <el-table-column prop=\"id\" label=\"ID\" />\n      <el-table-column prop=\"title\" label=\"标题\" />\n      <el-table-column prop=\"content\" label=\"内容\" />\n      <el-table-column prop=\"adminId\" label=\"管理员ID\" />\n      <el-table-column prop=\"sendTime\" label=\"发送时间\">\n        <template slot-scope=\"scope\">{{ formatDate(scope.row.sendTime) }}</template>\n      </el-table-column>\n      <el-table-column prop=\"createdAt\" label=\"创建时间\">\n        <template slot-scope=\"scope\">{{ formatDate(scope.row.createdAt) }}</template>\n      </el-table-column>\n      <el-table-column label=\"操作\" width=\"160\" fixed=\"right\">\n        <template slot-scope=\"scope\">\n          <el-button size=\"mini\" @click=\"handleEdit(scope.row)\">编辑</el-button>\n          <el-button size=\"mini\" type=\"danger\" @click=\"handleDelete(scope.row.id)\">删除</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n\n    <!-- 添加/编辑通知弹出框 -->\n    <el-dialog :visible.sync=\"dialogVisible\" title=\"通知信息\" width=\"600px\">\n      <el-form ref=\"notificationForm\" :model=\"notification\" :rules=\"rules\" label-width=\"100px\">\n        <el-form-item label=\"标题\" prop=\"title\">\n          <el-input v-model=\"notification.title\" />\n        </el-form-item>\n\n        <el-form-item label=\"内容\" prop=\"content\">\n          <el-input v-model=\"notification.content\" />\n        </el-form-item>\n\n        <el-form-item label=\"管理员ID\" prop=\"adminId\">\n          <el-input v-model=\"notification.adminId\" :disabled=\"true\" />\n        </el-form-item>\n\n        <el-form-item label=\"发送时间\" prop=\"sendTime\">\n          <el-date-picker v-model=\"notification.sendTime\" type=\"datetime\" placeholder=\"选择发送时间\" />\n        </el-form-item>\n\n        <el-form-item>\n          <el-button type=\"primary\" @click=\"submitForm\">保存</el-button>\n          <el-button @click=\"closeDialog\">取消</el-button>\n        </el-form-item>\n      </el-form>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport NotificationAPI from '@/api/notifications_api';\nimport AdminAPI from '@/api/admin_api'; // 导入管理员 API\n\nexport default {\n  data() {\n    return {\n      notifications: [],\n      totalRecords: 0, // 添加记录数\n      selectedNotifications: [],\n      searchForm: {\n        title: '',\n        content: ''\n      },\n      dialogVisible: false,  // 控制弹出框显示\n      notification: {\n        id: null,\n        adminId: null,  // 管理员ID，默认值为null\n        title: '',\n        content: '',\n        sendTime: '',\n        createdAt: '',\n      },\n      rules: {\n        title: [{ required: true, message: '请输入通知标题', trigger: 'blur' }],\n        content: [{ required: true, message: '请输入通知内容', trigger: 'blur' }],\n        sendTime: [{ required: true, message: '请选择发送时间', trigger: 'change' }],\n        adminId: [{ required: true, message: '管理员ID不能为空', trigger: 'blur' }]\n      }\n    };\n  },\n  created() {\n    this.fetchNotifications();\n    this.fetchAdminId();  // 获取管理员ID\n  },\n  methods: {\n    async fetchNotifications() {\n      const example = {\n        oredCriteria: [{ criteria: [] }]\n      };\n\n      if (this.searchForm.title) {\n        example.oredCriteria[0].criteria.push({\n          condition: \"title LIKE\",\n          value: `%${this.searchForm.title}%`,\n          singleValue: true\n        });\n      }\n\n      if (this.searchForm.content) {\n        example.oredCriteria[0].criteria.push({\n          condition: \"content LIKE\",\n          value: `%${this.searchForm.content}%`,\n          singleValue: true\n        });\n      }\n\n      try {\n        const response = await NotificationAPI.getNotificationsByExampleWithBLOBs(example);\n        this.notifications = response.data;\n\n        const countResponse = await NotificationAPI.countNotifications(example);\n        this.totalRecords = countResponse.data; // 假设返回的是记录总数\n      } catch (error) {\n        console.error('获取通知列表失败', error);\n      }\n    },\n\n    async fetchAdminId() {\n      try {\n        const response = await AdminAPI.getAdmins({});\n        if (response.data && response.data.length > 0) {\n          // 假设返回第一个管理员ID，您可以根据实际情况处理\n          this.notification.adminId = response.data[0].id;\n        }\n      } catch (error) {\n        console.error('获取管理员信息失败', error);\n      }\n    },\n\n    resetSearch() {\n      this.searchForm = { title: '', content: '' };\n      this.fetchNotifications();\n    },\n\n    handleSelectionChange(selection) {\n      this.selectedNotifications = selection.map(notification => notification.id);\n    },\n\n    handleAdd() {\n      this.notification = {\n        id: null,\n        adminId: this.notification.adminId,\n        title: '',\n        content: '',\n        sendTime: '',\n        createdAt: '',\n      };\n      this.dialogVisible = true;\n    },\n\n    handleEdit(notification) {\n      this.notification = { ...notification };\n      this.dialogVisible = true;\n    },\n\n    async submitForm() {\n      this.$refs.notificationForm.validate(async (valid) => {\n        if (valid) {\n          try {\n            if (this.notification.id) {\n              await NotificationAPI.updateNotificationByIdWithBLOBs(this.notification);\n            } else {\n              await NotificationAPI.addNotificationSelective(this.notification);\n            }\n            this.$message.success('通知信息保存成功');\n            this.dialogVisible = false;\n            this.fetchNotifications();\n          } catch (error) {\n            this.$message.error('保存通知信息失败');\n            console.error(error);\n          }\n        }\n      });\n    },\n\n    closeDialog() {\n      this.dialogVisible = false;\n    },\n\n    confirmBatchDelete() {\n      if (this.selectedNotifications.length === 0) return;\n      this.$confirm('确定要删除选中的通知吗？', '警告', {\n        type: 'warning',\n        cancelButtonText: '取消',\n        confirmButtonText: '确定'\n      })\n        .then(() => this.handleBatchDelete())\n        .catch(() => { });\n    },\n\n    async handleBatchDelete() {\n      try {\n        const example = {\n          oredCriteria: [{ criteria: [] }]\n        };\n        await NotificationAPI.deleteNotificationByExample(example);\n        this.fetchNotifications();\n        this.selectedNotifications = [];\n        this.$message.success('批量删除成功');\n      } catch (error) {\n        console.error('批量删除失败', error);\n      }\n    },\n\n    async handleDelete(id) {\n      try {\n        // 显示确认对话框\n        await this.$confirm('确定要删除这条通知吗？', '提示', {\n          type: 'warning',\n          confirmButtonText: '确定',\n          cancelButtonText: '取消',\n          confirmButtonClass: 'el-button--danger',\n          closeOnClickModal: false,\n          beforeClose: async (action, instance, done) => {\n            if (action === 'confirm') {\n              instance.confirmButtonLoading = true;\n              try {\n                await NotificationAPI.deleteNotificationById(id);\n                this.$message.success('删除成功');\n                this.fetchNotifications();\n              } catch (error) {\n                console.error('删除失败', error);\n                this.$message.error('删除失败');\n                throw error;\n              } finally {\n                instance.confirmButtonLoading = false;\n                done();\n              }\n            } else {\n              done();\n              this.$message.info('已取消删除');\n            }\n          }\n        });\n      } catch (error) {\n        if (error !== 'cancel') {\n          console.error('删除处理异常', error);\n        }\n      }\n    },\n\n    formatDate(date) {\n      return date ? new Date(date).toLocaleString() : \"无\";\n    }\n  }\n};\n</script>\n\n<style scoped>\n.app-container {\n  padding: 20px;\n}\n\n.el-table {\n  margin-top: 20px;\n}\n\n.el-button {\n  margin-right: 5px;\n}\n\n.search-form {\n  margin-bottom: 0px;\n}\n\n.record-count {\n  margin-top: 20px;\n  font-size: 14px;\n  color: #606266;\n}\n</style>"]}]}